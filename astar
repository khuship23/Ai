import heapq

def astar(graph, start, goal):
    open_list = [(0, start)]
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    
    while open_list:
        current_cost, current_node = heapq.heappop(open_list)
        
        if current_node == goal:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return list(reversed(path)) 
        
        for neighbor, cost in graph.get(current_node, {}).items():
            tentative_g_score = g_score[current_node] + cost
            
            if tentative_g_score < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current_node
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_score, neighbor))
    
    return None

def heuristic(node, goal):
    # Simple heuristic: Cost from current node to goal node
    return 0  # In this example, the heuristic is 0, making A* equivalent to Dijkstra's algorithm

def get_user_input():
    graph = {}
    num_edges = int(input("Enter the number of edges: "))

    for _ in range(num_edges):
        source, dest, cost = input("Enter edge (source dest cost): ").split()
        cost = int(cost)

        if source not in graph:
            graph[source] = {}
        if dest not in graph:
            graph[dest] = {}

        graph[source][dest] = cost

    start_node = input("Enter the start node: ")
    goal_node = input("Enter the goal node: ")

    return graph, start_node, goal_node

if __name__ == "__main__":
    user_graph, user_start, user_goal = get_user_input()

    path = astar(user_graph, user_start, user_goal)

    if path:
        print("Shortest path:", path)
    else:
        print("No path found")




Enter the number of edges: 7
Enter edge (source dest cost): 1 2 1
Enter edge (source dest cost): 1 3 3
Enter edge (source dest cost): 2 4 2
Enter edge (source dest cost): 3 4 5
Enter edge (source dest cost): 4 5 4
Enter edge (source dest cost): 2 6 7
Enter edge (source dest cost): 5 7 6
Enter the start node: 1
Enter the goal node: 7
Shortest path: ['1', '2', '4', '5', '7']






------------------------------------------
import heapq

class GraphNode:
    def __init__(self, name, value):
        self.name = name
        self.value = value
        self.edges = {}

    def add_edge(self, node, weight):
        self.edges[node] = weight

    def __lt__(self, other):
        return self.value < other.value

def heuristic(node, target_node):
    # Calculate Manhattan distance for grid-based problem
    node_x, node_y = node.value
    target_x, target_y = target_node.value
    return abs(node_x - target_x) + abs(node_y - target_y)

def create_nodes():
    nodes = {}
    num_nodes = int(input("Enter the number of nodes: "))
    for _ in range(num_nodes):
        node_name = input("Enter node name: ")
        node_x, node_y = map(int, input("Enter coordinates (x y): ").split())
        nodes[node_name] = GraphNode(node_name, (node_x, node_y))
    return nodes

def create_edges(nodes):
    num_edges = int(input("Enter the number of edges: "))
    for _ in range(num_edges):
        src, dest = input("Enter edge (source destination): ").split()
        weight = int(input("Enter edge weight: "))
        nodes[src].add_edge(nodes[dest], weight)

def astar_search(nodes, start_node, target_node):
    open_list = []
    closed_list = set()

    heapq.heappush(open_list, (0, nodes[start_node], []))  # Modified to include path
    while open_list:
        current_cost, current_node, current_path = heapq.heappop(open_list)
        closed_list.add(current_node)

        if current_node == nodes[target_node]:
            return current_path + [current_node]  # Return the path if the target node is found

        for neighbor, weight in current_node.edges.items():
            if neighbor not in closed_list:
                heuristic_cost = heuristic(neighbor, nodes[target_node])
                heapq.heappush(open_list, (current_cost + weight + heuristic_cost, neighbor, current_path + [current_node]))

    return None  # No path found

if __name__ == '__main__':
    nodes = create_nodes()
    create_edges(nodes)

    start_node = input("Enter start node: ")
    target_node = input("Enter target node: ")
    
    path = astar_search(nodes, start_node, target_node)

    if path:
        print("Path found from {} to {}:".format(start_node, target_node))
        print("  ", [node.name for node in path])
    else:
        print("Path not found from {} to {}.".format(start_node, target_node))
